# Part A: Conceptual Questions

## Inheritance Definition

### What is Inheritance?
- **Inheritance** allows a class to inherit attributes and methods from another, promoting code reuse.

### Inheritance vs. Composition/Aggregation
- **Inheritance** creates a parent-child class relationship.
- **Composition** is a "has-a" relationship (e.g., a `Car` has an `Engine`).
- **Aggregation** is a looser "has-a" relationship (e.g., a `University` has `Departments`).

---

## Types of Inheritance

1. **Single Inheritance**: One base class, one derived class.
   - Example: `Dog` inherits from `Animal`.

2. **Multiple Inheritance**: One derived class inherits from multiple base classes.
   - Example: `FlyingCar` inherits from both `Car` and `Airplane`.

---

## Overriding Methods

- **Method overriding** lets a derived class change or extend a base class method.
- Override a method to maintain a consistent interface (polymorphism), rather than adding a new method which could break consistency.

---

## Real-World Analogy

- **Example**: A `SportsCar` inherits features from a `Car` but adds specific traits like high-speed performance.
- This mirrors OOP inheritance, where `SportsCar` extends `Car` with additional or modified functionality.
